{"name":"Openweathermap","tagline":"Go (golang) library for use with openweathermap.org's API.","body":"# OpenWeatherMap Go API\r\n\r\n[![GoDoc](https://godoc.org/github.com/tejainece/openweathermap?status.svg)](https://godoc.org/github.com/tejainece/openweathermap)\r\n[![Build Status](https://travis-ci.org/tejainece/openweathermap.svg?branch=master)](https://travis-ci.org/tejainece/openweathermap)\r\n\r\nGo (golang) package for use with openweathermap.org's API.\r\n\r\nFor more detail about the library and its features, reference your local godoc once installed.\r\n\r\n[Website](https://briandowns.github.io/openweathermap)!\r\n\r\nContributions welcome!\r\n\r\n## Features\r\n\r\n### Current Weather Conditions\r\n\r\n- By City\r\n- By City,St (State)\r\n- By City,Co (Country)\r\n- By City ID\r\n- By Zip,Co (Country)\r\n- By Longitude and Latitude\r\n\r\n## Forecast\r\n\r\nGet the weather conditions for a given number of days.\r\n\r\n- By City\r\n- By City,St (State)\r\n- By City,Co (Country)\r\n- By City ID\r\n- By Longitude and Latitude\r\n\r\n### Access to Condition Codes and Icons\r\n\r\nGain access to OpenWeatherMap icons and condition codes.\r\n\r\n- Thunderstorms\r\n- Drizzle\r\n- Rain\r\n- Snow\r\n- Atmosphere\r\n- Clouds\r\n- Extreme\r\n- Additional\r\n\r\n### Data Available in Multiple Measurement Systems\r\n\r\n- Fahrenheit (OpenWeatherMap API - imperial)\r\n- Celcius (OpenWeatherMap API - metric)\r\n- Kelvin (OpenWeatherMap API - internal)\r\n\r\n## Historical Conditions\r\n\r\n- ...still in the works...\r\n\r\n## Supported Languages\r\n\r\nEnglish - en, Russian - ru, Italian - it, Spanish - es (or sp), Ukrainian - uk (or ua), German - de, Portuguese - pt, Romanian - ro, Polish - pl, Finnish - fi, Dutch - nl, French - fr, Bulgarian - bg, Swedish - sv (or se), Chinese Traditional - zh_tw, Chinese Simplified - zh (or zh_cn), Turkish - tr, Croatian - hr, Catalan - ca\r\n\r\n## Installation\r\n\r\n```bash\r\ngo get github.com/briandowns/openweathermap\r\n```\r\n\r\n# Initializing the configuration\r\n\r\nOWM requires mandatory API key sent with every request. openweathermap provides\r\npublic variable called Config, that allows setting configuration values.\r\n\r\n## Manually set API key\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t// Shortening the import reference name seems to make it a bit easier\r\n    owm \"github.com/briandowns/openweathermap\"\r\n)\r\n\r\nfunc main() {\r\n    owm.Config.SetApiKey(\"12345678901234567890123456789012\")\r\n}\r\n```\r\n\r\n## Use openweathermap's Init function\r\n\r\nopenweathermap provides a standard way to initialize the package and configuration\r\nvariables. It is safer not to store API keys in source code. openweathermap encourages\r\nusers to pass API key through environment variables. openweathermap's ```Init```\r\nmethod automatically intializes the configuration values from predefined environment\r\nvariable.\r\n\r\n| Configuration | Environment variable |\r\n|---------------|----------------------|\r\n| API key       | OWM_API_KEY          |\r\n| Username      | OWM_USERNAME         |\r\n| Password      | OWM_PASSWORD         |\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n\t// Shortening the import reference name seems to make it a bit easier\r\n    owm \"github.com/briandowns/openweathermap\"\r\n)\r\n\r\nfunc main() {\r\n    if lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tpanic(lInitErr)\r\n\t}\r\n}\r\n```\r\n\r\n## Examples\r\n\r\nThere are a few full examples in the examples directory that can be referenced.  1 is a command line application and 1 is a simple web application.\r\n\r\n```Go\r\npackage main\r\n\r\nimport (\r\n    \"log\"\r\n    \"fmt\"\r\n\r\n\t// Shortening the import reference name seems to make it a bit easier\r\n    owm \"github.com/briandowns/openweathermap\"\r\n)\r\n\r\nfunc main() {\r\n\tif lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\t\r\n    w, err := owm.NewCurrent(\"F\", \"ru\") // fahrenheit (imperial) with Russian output\r\n    if err != nil {\r\n        log.Fatalln(err)\r\n    }\r\n\r\n    w.CurrentByName(\"Phoenix\")\r\n    fmt.Println(w)\r\n}\r\n```\r\n\r\n### Current Conditions by location name\r\n\r\n```Go\r\nfunc main() {\r\n\tif lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\t\r\n    w, err := owm.NewCurrent(\"K\", \"EN\") // (internal - OpenWeatherMap reference for kelvin) with English output\r\n    if err != nil {\r\n        log.Fatalln(err)\r\n    }\r\n\r\n    w.CurrentByName(\"Phoenix,AZ\")\r\n    fmt.Println(w)\r\n}\r\n```\r\n\r\n### Forecast Conditions in imperial (fahrenheit) by coordinates\r\n\r\n```Go\r\nfunc main() {\r\n\tif lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\t\r\n    w, err := owm.NewForecast(\"F\", \"FI\")\r\n    if err != nil {\r\n        log.Fatalln(err)\r\n    }\r\n\r\n    w.DailyByCoordinates(\r\n    \t\t&Coordinates{\r\n    \t\t\tLongitude: -112.07,\r\n    \t\t\tLatitude: 33.45,\r\n    \t\t},\r\n    )\r\n    fmt.Println(w)\r\n}\r\n```\r\n\r\n### Current conditions in metric (celsius) by location ID\r\n\r\n```Go\r\nfunc main() {\r\n\tif lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\t\r\n    w, err := owm.NewCurrent(\"C\", \"PL\")\r\n    if err != nil {\r\n        log.Fatalln(err)\r\n    }\r\n\r\n    w.CurrentByID(2172797)\r\n    fmt.Println(w)\r\n}\r\n```\r\n\r\n### Current conditions by zip code. 2 character country code required\r\n\r\n```Go\r\nfunc main() {\r\n\tif lInitErr := owm.Init(); lInitErr != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\t\r\n\tw, err := owm.NewCurrent(\"F\", \"US\")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tw.CurrentByZip(19125, \"US\")\r\n\tfmt.Println(w)\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}